
PORT = /dev/ttyUSB0
TARGET = target/restMcu
ARDUINO_CORE = lib/arduino/hardware/arduino/cores/arduino
A_LIB = lib/arduino/libraries

SRC =
CXXSRC =


###ARDUINO
SRC += $(ARDUINO_CORE)/wiring.c $(ARDUINO_CORE)/wiring_analog.c $(ARDUINO_CORE)/wiring_digital.c \
	$(ARDUINO_CORE)/wiring_pulse.c $(ARDUINO_CORE)/wiring_shift.c $(ARDUINO_CORE)/WInterrupts.c
CXXSRC += $(ARDUINO_CORE)/new.cpp $(ARDUINO_CORE)/HardwareSerial.cpp $(ARDUINO_CORE)/WString.cpp \
	$(ARDUINO_CORE)/IPAddress.cpp $(A_LIB)/SPI/SPI.cpp $(ARDUINO_CORE)/WMath.cpp $(ARDUINO_CORE)/Print.cpp
CINCS = -I$(ARDUINO_CORE) -I$(ARDUINO_CORE)/../../variants/standard -I$(ARDUINO_CORE) \
	-I$(A_LIB)/SPI -I$(A_LIB)/Ethernet -I$(A_LIB)/Ethernet/utility
CXXINCS = $(CINCS)

#W5100
CXXSRC += $(A_LIB)/Ethernet/utility/socket.cpp $(A_LIB)/Ethernet/utility/w5100.cpp $(A_LIB)/Ethernet/Dhcp.cpp \
	 $(A_LIB)/Ethernet/Ethernet.cpp $(A_LIB)/Ethernet/EthernetUdp.cpp $(A_LIB)/Ethernet/Dns.cpp  \
	$(A_LIB)/Ethernet/EthernetClient.cpp $(A_LIB)/Ethernet/EthernetServer.cpp


CXXSRC += src/hcc.cpp
# src/util/pure_virtual.cpp 


MCU = atmega328p
F_CPU = 16000000L
FORMAT = ihex
UPLOAD_RATE = 115200

# Name of this Makefile (used for "make depend").
MAKEFILE = Makefile

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
#DEBUG = stabs

OPT = s

# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU) -MMD -DUSB_VID=null -DUSB_PID=null
CXXDEFS = -DF_CPU=$(F_CPU) -MMD -DUSB_VID=null -DUSB_PID=null


# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
#CSTANDARD = -std=gnu99
CDEBUG = -g$(DEBUG)
CWARN = -ffunction-sections -fdata-sections 
CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
#CEXTRA = -Wa,-adhlns=$(<:.c=.lst)

CFLAGS = $(CDEBUG) -O$(OPT) $(CDEFS) $(CINCS)  $(CSTANDARD) $(CEXTRA)
CXXFLAGS = $(CDEBUG) -O$(OPT) $(CXXDEFS) $(CXXINCS) 
#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs 
LDFLAGS = -lm


# Programming support using avrdude. Settings and variables.
AVRDUDE_CONF = /etc/avrdude.conf
AVRDUDE_PROGRAMMER = stk500
AVRDUDE_PORT = $(PORT)
AVRDUDE_WRITE_FLASH = -U flash:w:$(TARGET).hex
AVRDUDE_FLAGS = -V -F -C $(AVRDUDE_CONF) -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER) \
  -b $(UPLOAD_RATE)

# Program settings
CC = avr-gcc
CXX = avr-g++
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
NM = avr-nm
AVRDUDE = avrdude
REMOVE = rm -f
MV = mv -f

# Define all object files.
OBJ = $(SRC:.c=.o) $(CXXSRC:.cpp=.o) $(ASRC:.S=.o)

# Define all listing files.
LST = $(ASRC:.S=.lst) $(CXXSRC:.cpp=.lst) $(SRC:.c=.lst)

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. $(CFLAGS)
ALL_CXXFLAGS = -Wall -fno-exceptions -ffunction-sections -fdata-sections -mmcu=$(MCU) -I. $(CXXFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE = $(SIZE)  $(TARGET).elf
sizebefore:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(HEXSIZE); echo; fi


# Default target.
all: package

test:
	if [ -z $$MCU ]; then \
		echo "missing $$MCU"; \
		exit 42; \
	fi


package: target_files test elf hex eep sizeafter

elf: $(TARGET).elf
hex: $(TARGET).hex
eep: $(TARGET).eep
lss: $(TARGET).lss 
sym: $(TARGET).sym

# Program the device.  
upload: $(TARGET).hex $(TARGET).eep sizeafter
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)

target_files:
	test -d target || mkdir target



# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000 


coff: $(TARGET).elf
	$(COFFCONVERT) -O coff-avr $(TARGET).elf $(TARGET).cof


extcoff: $(TARGET).elf
	$(COFFCONVERT) -O coff-ext-avr $(TARGET).elf $(TARGET).cof


.SUFFIXES: .elf .hex .eep .lss .sym .cpp .o .c .s .S

.elf.hex:
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

.elf.eep:
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Create extended listing file from ELF output file.
.elf.lss:
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
.elf.sym:
	$(NM) -n $< > $@



# Link: create ELF output file from object files.
#$(TARGET).elf: $(OBJ)
#	$(CC) $(ALL_CFLAGS) $(OBJ) --output $@ $(LDFLAGS)

## Link: create ELF output file from library.
$(TARGET).elf: target/core.a
	$(CC) -Os -Wl,--gc-sections -mmcu=atmega328p  -o $@ -L. target/core.a /usr/lib/avr/lib/avr5/libc.a $(LDFLAGS)

target/core.a: $(OBJ)
	@for i in $(OBJ); do echo $(AR) rcs target/core.a $$i; $(AR) rcs target/core.a $$i; done



# Compile: create object files from C++ source files.
.cpp.o:
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@ 

# Compile: create object files from C source files.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $< -o $@ 


# Compile: create assembler files from C source files.
.c.s:
	$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
.S.o:
	$(CC) -c $(ALL_ASFLAGS) $< -o $@


# Automatic dependencies
%.d: %.c
	$(CC) -M $(ALL_CFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@

%.d: %.cpp
	$(CXX) -M $(ALL_CXXFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@



# Target: clean project.
clean:
	$(REMOVE) $(TARGET).hex $(TARGET).eep $(TARGET).cof $(TARGET).elf \
	$(TARGET).map $(TARGET).sym $(TARGET).lss target/core.a \
	$(OBJ) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CXXSRC:.cpp=.s) $(CXXSRC:.cpp=.d)

#depend:
#	if grep '^# DO NOT DELETE' $(MAKEFILE) >/dev/null; \
#	then \
#		sed -e '/^# DO NOT DELETE/,$$d' $(MAKEFILE) > \
#			$(MAKEFILE).$$$$ && \
#		$(MV) $(MAKEFILE).$$$$ $(MAKEFILE); \
#	fi
#	echo '# DO NOT DELETE THIS LINE -- make depend depends on it.' \
#		>> $(MAKEFILE); \
#	$(CC) -M -mmcu=$(MCU) $(CDEFS) $(CINCS) $(SRC) $(ASRC) >> $(MAKEFILE)

.PHONY:	all package elf hex eep lss sym program coff extcoff clean depend sizebefore sizeafter

